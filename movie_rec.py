# -*- coding: utf-8 -*-
"""Movie_Rec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wkrm3-b8TV6axXkAfmqwxSIbDnlaaVDj
"""

# Movie Recommendation System Project by Faisal Hussain.
import pandas as pnd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Loading the dataset
movie = pnd.read_csv('/content/movies_data.csv', sep='\t', encoding='latin-1', usecols=['movie_id', 'title', 'genres'])

# Breaking  the big genre string into a string array
movie['genres'] = movie['genres'].str.split('|')
# Convertinto genres into string value
movie['genres'] = movie['genres'].fillna("").astype('str')

# Creating TF-IDF matrix
tf = TfidfVectorizer(analyzer='word', ngram_range=(1, 2), min_df=0, stop_words='english')
tfidf_matrix = tf.fit_transform(movie['genres'])

# Calculating cosine similarity
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Building an one-dimensional array with movie titles
titles_name = movie['title']
indices = pnd.Series(movie.index, index=movie['title'])

# Function that will gets movie recommendations based on the cosine similarity score of movie genres
def genre_recommendations(title):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:21]  # Get the top 20 similar movies
    movie_indices = [i[0] for i in sim_scores]
    return titles_name.iloc[movie_indices]
#Tacking User Input
movie_name = input("Enter Movie Name:")

# Call the function to get genre-based recommendations for a movie
recommended_movies = genre_recommendations(movie_name)
print("Some recommended Movies for you are listed below:")
print(recommended_movies.head(10))